public class ReverseWord {

    public static void main(String[] args) {
        String s = "Apple is the best IT company!";
        System.out.println("Простой поворот строки " + reverseString(s));
        System.out.println("Поворот строки с сохранением порядка строк " + reverseWordCharacters(s));
        // Проверка результата
        System.out.println("!ynapmoc TI tseb eht si elppA".equals(reverseString(s)));
        System.out.println("elppA si eht tseb TI !ynapmoc".equals(reverseWordCharacters(s)));
        System.out.println("elppA si eht tseb TI !ynapmoc".equals(reverseWordStreamAPI(s)));
    }

    // Используем StringBuilder для переворота всей строки
    public static String reverseString(String str) {
        // Создаём объект StringBuilder, который принимает строку str
        return new StringBuilder(str).reverse().toString(); //использован стандартный метод reverse().tiString()
    }

    /*
    StringBuilder — это специальный класс в Java, который позволяет эффективно изменять строки. В отличие от обычных строк (String),
    которые являются неизменяемыми (immutable), StringBuilder позволяет изменять содержимое строки без создания новых объектов в памяти.

    Почему строки неизменяемы?
    Обычные строки в Java (String) неизменяемы. Это означает, что каждый раз, когда вы изменяете строку
    (например, добавляете к ней что-то или изменяете символы), создаётся новый объект строки в памяти.
    Это может быть неэффективно, если нужно часто изменять строку (например, при конкатенации множества строк).

    Что делает StringBuilder?
    StringBuilder позволяет изменять строку (например, добавлять символы, удалять их или переворачивать)
    без создания нового объекта строки каждый раз. Это делает работу с изменяемыми строками намного более производительной.
     */

    //А это с сохранением порядка слов - перевернуты только слова по отдельности, а их порядок сохранен
    /*АЛГОРИТМ:
    0) Создаем метод, принимающий строку в аргумент и возвращающий перевернутую строку.
    1) Разбиваем начальную строку на массив строк
    2) Создаем StringBuilder Для перевернутого предложения (пустой)
    3) Создаем цикл foreach для перебора каждого элемента массива и его переворота
    4) Перевернутый элемент массива добавляем через append к StringBuilder
    5) После каждого элемента добавляем пробел " " через тот же append
    6) В конце, после выхода из foreach отрезаем последний пробел через .trim()
    */
    public static String reverseWordCharacters(String str) {
        // Разбиваем строку на слова по пробелам между ними, тогда массив будет таким: ["Apple", "is", "the", "best", "IT", "company!"]
        String[] words = str.split(" ");
        //Создаём объект типа StringBuilder для итогового результата - предложения. Этот объект будет хранить перевёрнутые слова и помогать собирать финальную строку.
        StringBuilder reversedSentence = new StringBuilder();

        // Перебираем все слова и разворачиваем символы в каждом слове
        for (String word : words) { // цикл foreach, word -- имя переменной, в которую поочерёдно будут записываться элементы массива words
            // Разворачиваем символы в текущем слове
            //Создаём StringBuilder из текущего слова. Например, если слово — "Apple", то создаётся объект StringBuilder, содержащий "Apple".
            StringBuilder reversedWord = new StringBuilder(word);
            //Добавляем перевёрнутое слово к итоговой строке через append. 
            // После каждого перевёрнутого слова добавляется пробел, чтобы сохранить разделение между словами.
            reversedSentence.append(reversedWord.reverse()).append(" ");

          /*  Из массива words извлекается одно слово, и оно помещается в переменную word.
Затем в теле цикла выполняются операции с этой переменной. В данном случае:
Создаётся объект StringBuilder на основе этого слова.
С помощью метода reverse() символы в этом слове разворачиваются в обратном порядке.
Перевёрнутое слово добавляется к результирующей строке с пробелом с помощью метода append().
*/
        }

        // Возвращаем строку, удаляя последний пробел
        return reversedSentence.toString().trim();
    }

    /*
    Метод reverseWordCharacters:

    Делит строку на слова.
    Для каждого слова переворачивает символы.
    Собирает перевёрнутые слова обратно в строку с пробелами между ними.
    Удаляет лишний пробел в конце с помощью trim().
     */

}

        //МЕТОД ПОВОРОТА БУКВ В СЛОВАХ С ПОМОЩЬЮ Stream API (Stream API — это набор методов для работы с последовательностями данных (потоками))
        public static String reverseWordStreamAPI(String str) {
            // Разбиваем строку на слова, создаём поток слов, переворачиваем каждое слово, и собираем результат обратно в строку
            return Arrays.stream(str.split(" ")) //Превращаем массив слов в поток данных с помощью Arrays.stream(). Это позволяет применить к каждому слову нужные операции.
                    .map(word -> new StringBuilder(word).reverse().toString()) // Применяем операцию map() к каждому слову.
                    // Она трансформирует каждое слово, создавая новый StringBuilder из слова, переворачивая его с помощью метода reverse(),
                    // а затем превращая обратно в строку с помощью toString().
                    .collect(Collectors.joining(" ")); // После применения преобразования map() к каждому слову,
            // собираем поток обратно в строку, разделяя слова пробелами, с помощью Collectors.joining(" ").

            /*
            Метод map() — это промежуточная операция Stream API, которая применяется к каждому элементу потока и преобразует его в новый элемент.
             В результате всех преобразований map() создаёт новый поток данных с элементами, которые получаются после выполнения этой операции.
             В map() нужно передать функцию, которая будет применяться к каждому элементу потока.
            В нашем случае каждый элемент — это слово, и задача — перевернуть символы этого слова.
            word: При каждом вызове метода map(), в лямбда-выражение передаётся одно слово из потока.
            */
        }
