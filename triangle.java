package pages.WS_api;

import java.io.*;

/*
Даны три натуральных числа. Возможно ли построить треугольник с такими сторонами? Если это возможно, выведите строку YES, иначе выведите строку NO.
Треугольник — это три точки, не лежащие на одной прямой. (Сумма двух сторон больше третьей)
Формат ввода:
Вводятся три натуральных числа

Формат вывода
Выводится ответ о возможности или невозможности существования треугольника с указанными сторонами
*/

public static void main(String[] args) throws IOException {
    public static void main(String[] args) throws IOException { // Исключение для операций ввода-вывода чтобы обработать возможные ошибки при чтении данных.
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); // Создаем объект-ридер для чтения с консоли
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out)); // Создаем объект для вывода в поток

        int a, b, c; //инициализируем переменные заранее

        // Чтение трёх сторон треугольника из консоли с инструкциями и обработкой ошибок ввода
        while (true) { //Бесконечный цикл, который будет продолжаться, пока не выполнится break при корректном вводе данных от юзера
            try {
                writer.write("Введите длину 1 стороны: "); //инструкция в консоли
                writer.flush();
                a = Integer.parseInt(reader.readLine()); // Перевод введенной строки в int
                if (a <= 0) throw new NumberFormatException(); // Проверка на положительное значение
                break;
            } catch (NumberFormatException e) {
                writer.write("Некорректный ввод! Введите положительное целое число.\n");
                writer.flush();
            }
        }

        /*
        Почему и когда используется flush
        1) Убедиться в немедленном выводе данных: Метод flush() принудительно очищает буфер, отправляя все накопленные данные в поток вывода. Это полезно, когда вам нужно быть уверенным, что все данные сразу же будут выведены, например, перед запросом на ввод новых данных.
        2) Во время диалога с пользователем: В случаях, когда программа взаимодействует с пользователем (как в вашем примере), важно, чтобы пользователь видел инструкцию до того, как ему будет предложено ввести данные. Использование flush() перед readLine() гарантирует, что сообщение будет выведено немедленно.
        3) При завершении работы: Также полезно вызывать flush() перед закрытием потока, чтобы убедиться, что все данные из буфера были записаны в целевой поток вывода.
         */

        while (true) {
            try {
                writer.write("Введите длину 2 стороны: ");
                writer.flush();
                b = Integer.parseInt(reader.readLine());
                if (b <= 0) throw new NumberFormatException(); // Проверка на положительное значение
                break;
            } catch (NumberFormatException e) {
                writer.write("Некорректный ввод! Введите положительное целое число.\n");
                writer.flush();
            }
        }

        while (true) {
            try {
                writer.write("Введите длину 3 стороны: ");
                writer.flush();
                c = Integer.parseInt(reader.readLine());
                if (c <= 0) throw new NumberFormatException(); // Проверка на положительное значение
                break; //Если ввод корректен (положительное целое число), выходим из цикла
            } catch (NumberFormatException e) { //отловим исключение при некорректном вводе
                writer.write("Некорректный ввод! Введите положительное целое число.\n");
                writer.flush();
            }
        }

        // Проверка условия существования треугольника (сумма каждых двух сторон должна быть больше третьей стороны)
        if (a + b > c && a + c > b && b + c > a) {
            writer.write("Треугольник возможно построить с указанными длинами сторон\n"); //вывод с переводом на новую строку
        } else {
            writer.write("Треугольник НЕвозможно построить с указанными длинами сторон\n"); //вывод с переводом на новую строку
        }

        writer.flush(); // Убеждаемся, что все данные записаны
        reader.close(); // Закрытие потока
        writer.close(); //Закрытие потока
    }
}
